`
reduce_val (cl8,fs:framestack) = 
  (case fs of [] -> NONE || f::fs -> (
  case f of 

    App(Wrap(Cl2 cl2), Wrap Hole) -> ((SOME o redex_fs_to_cl_fs) <|
       new_cl := cl2;
       new_fs := cons_fs (App(Wrap Hole, Wrap(Cl2 cl8))) fs |>)

    || App(Wrap Hole, Wrap(Cl2 cl2)) -> (case push_env cl8 of 

          (Const "Fix") -> ((SOME o redex_fs_to_cl_fs) <|
              new_cl := cl2;
              new_fs := (
                let (is_v2, e2, env2) = dest_Cl cl2 in
                let fixarg = mk_cl_noenv F (App(Const "Fix", e2)) env2 in
                cons_fs (App(Wrap Hole,Wrap(Cl2 fixarg))) fs) |>)

          || (Const "=") -> (
              let e2 = cl_to_e cl2 in
              if is_pair e2 then ( 
                let (e3,e4) = dest_pair e2 in 
                ((SOME o redex_fs_to_cl_fs) <|
                new_cl := mk_cl_noenv T (Bool(e3=e4)) [];
                new_fs := fs |>))
              else NONE)

          || (Lam(x, Wrap cl3)) -> ((SOME o redex_fs_to_cl_fs) <|
              new_cl := (
                let (is_v3,e3,env3) = dest_Cl cl3 in
                let env3' = update env3 x cl2 in
                mk_cl_env F e3 env3');
              new_fs := fs |>)

          || _2 -> failwith NONE "reduce_val: App(Wrap Hole,v2)")

    || LetVal(x,Wrap Hole,Wrap(Cl2 cl2)) ->  ((SOME o redex_fs_to_cl_fs) <|
        new_cl := (
          let (is_v2, e2, env2) = dest_Cl cl2 in
          mk_cl_env F e2 (update env2 x cl8));
        new_fs := fs |>)

    || IfThenElse(Wrap Hole, Wrap(Cl2 cl2), Wrap(Cl2 cl3)) -> (case push_env cl8 of
          Bool b -> (if b then SOME(mk_cl_fs cl2 fs) else SOME(mk_cl_fs cl3 fs))
          || _9 -> failwith NONE "reduce_val: IfThenElse condition not a Bool")

    || Record flds -> (
        let p = partition (\ (fn,c). c = Wrap Hole) flds in
        let f = \ (flds1,(fn2,dummy),flds2).
          let flds1 = flds1++[(fn2,Wrap(Cl2 cl8))] in
          case flds2 of
            [] -> (OPTION_MAP (\ cl3. mk_cl_fs cl3 fs) (pull_env_record flds1))
            || (fn,Wrap(Cl2 cl3))::flds2 -> ((SOME o redex_fs_to_cl_fs) <|
                new_cl := cl3;
                new_fs := cons_fs (Record(flds1++[(fn,Wrap Hole)]++flds2)) fs |>)
            || _5 -> failwith NONE "reduce_val: Record"
        in
        OPTION_JOIN (OPTION_MAP f p))

    || Dotfield (Wrap Hole,fn) -> (case push_env cl8 of 
        Record flds2 -> (case lookup flds2 fn of 
            SOME(Wrap cl6) -> ((SOME o redex_fs_to_cl_fs) <|
                new_cl := cl6;
                new_fs := fs |>)
            || _1 -> failwith NONE "reduce_val: Dotfield without fn")
        || _6 -> failwith NONE "reduce_val: Dotfield not a Record")

    || Variant(s,Wrap Hole) -> ((SOME o redex_fs_to_cl_fs) <|
        new_cl := (
          let (is_v,e3,env3) = dest_Cl cl8 in
          mk_cl_noenv T (Variant(s,e3)) env3);
        new_fs := fs |>)

    || Cases(Wrap Hole,cs) -> (case push_env cl8 of 
        Variant(s,Wrap cl1) -> (case lookup cs s of 
          SOME(Wrap(Cl2 cl3)) -> ((SOME o redex_fs_to_cl_fs) <|
              new_cl := cl3;
              new_fs := cons_fs (App(Wrap Hole,Wrap(Cl2 cl1))) fs |>)
          || NONE -> (case lookup cs "_" of 
              SOME(Wrap(Cl2 cl3)) -> ((SOME o redex_fs_to_cl_fs) <|
                  new_cl := cl3;
                  new_fs := cons_fs (App(Wrap Hole,Wrap(Cl2 cl_unit))) fs |>)
              || _14 -> failwith NONE ("reduce_val: no case for variant "++s)))
        || _13 -> failwith NONE "reduce_val: Cases, not a Variant")

    || _8 -> failwith NONE "reduce_val: unrecognized frame on stack")

)
`
